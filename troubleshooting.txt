
GitHub oshop
https://github.com/stefano188/oshop.git

*******************************************************
Custom Validation with ng2-validation
https://github.com/yuyang041060120/ng2-validation
npm install ng2-validation --save

*******************************************************
Bootstrap 
https://getbootstrap.com/docs/4.0/layout/grid/
https://getbootstrap.com/docs/4.4/components/card/

Icon angular-fontawesome for angular 8
https://github.com/FortAwesome/angular-fontawesome
https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage/icon-library.md#using-the-icon-library

$ npm install @fortawesome/fontawesome-svg-core --save
$ npm install @fortawesome/free-solid-svg-icons --save
# See Compatibility table below to choose a correct version
$ npm install @fortawesome/angular-fontawesome@0.5.x --save

*******************************************************
DATA TABLE 

https://www.ngdevelop.tech/best-angular-tables/

# OLD https://github.com/ggmod/angular-2-data-table

# OLD https://github.com/brunano21/angular-4-data-table


https://www.npmjs.com/package/ng-angular8-datatable
npm i ng-angular8-datatable --save
https://github.com/JRafael91/ng-angular8-datatable#readme


*******************************************************
TYPESCRIPT Cheatsheet
https://devhints.io/typescript

*******************************************************
RXJS 
take operator
https://www.learnrxjs.io/learn-rxjs/operators/filtering/take


*******************************************************
FIREBASE CRUD  (var.$key deprecated)
https://alligator.io/angular/firebase-crud-operations/


FIREBASE Database Rules
{
  "rules": {
    ".read": true,
    ".write": "auth != null",
    "categories": {
    	".read": true
  	},
  	"products": {
    	".read": true
  	},
  	"shopping-carts": {
    	".read": true,
    	".write": true
  	}
  },
}

*******************************************************
FIREBASE HOST DEPLOY
Project Console: https://console.firebase.google.com/project/oshop-1632c/overview
Hosting URL: https://oshop-1632c.firebaseapp.com

FIREBASE Retrieving data as objects
https://github.com/angular/angularfire/blob/master/docs/rtdb/objects.md

FIREBASE Retrieving data as lists
https://github.com/angular/angularfire/blob/master/docs/rtdb/lists.md

FIREBASE Querying lists
https://github.com/angular/angularfire/blob/master/docs/rtdb/querying-lists.md

*******************************************************
Angular Firebase objects keys not being displayed.

https://stackoverflow.com/questions/47291644/angular-firebase-5-objects-keys-not-being-displayed-so-cant-delete

https://github.com/angular/angularfire/issues/1283

https://github.com/angular/angularfire/blob/master/docs/firestore/collections.md#snapshotchanges

  service.ts
getCategories() {
    let ref = this.db.list("/categories");
    return ref.snapshotChanges().pipe(map(changes => {
      return changes.map(c => {
        const key = c.key;
        const val = c.payload.val();
        return { key, val } ;
      })
    }));
  }

  component.ts
export class ProductFormComponent {
  categories$;
  constructor(categoryService: CategoryService) {
    this.categories$ = categoryService.getCategories();
   }

  component.html
<select ngModel name="category" id="category" class="form-control">
    <option value=""></option>
    <option *ngFor="let c of categories$ | async" [value]="c.key">
        {{ c.val.name }}
    </option>
</select>

<div class="list-group">
    ...
    <a *ngFor="let c of categories$ | async" 
        routerLink="/"
        [queryParams]="{ category: c.key }"
        [class.active]="category === c.key"
        class="list-group-item list-group-item-action"
        (click)="onCategoryChanged()">
        {{ c.val.name }}
    </a>
</div>


*******************************************************
ASYNC AWAIT in Angular

https://medium.com/@balramchavan/using-async-await-feature-in-angular-587dd56fdc77

Get HttpClient result using Observable:
 “subscribe” method is from “Observable” object. 
Once subscribed, “subscribe” callback shall be executed whenever there is a new data produced by “Observer”. 
Whereas promise’s “then()” callback handler shall be executed at max once. 
So until and unless you have requirement to consume recurring data, do not use “subscribe”. 
Use “toPromise()” instead. 
If you have noticed examples given on Angular’s official documentation; 
there is a heavy use of “toPromise”.
